{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["BALL_ANIM","entering","transition","marginTop","entered","exiting","exited","SorobanCell","props","tableCellStyle","border","height","borderTop","borderBottom","tableCellSeparaterStyle","upStyle","defaultStyle","state","cells","cellStyle","callbacks","onEnter","setState","onEntered","onExit","onExited","tamaClass","this","tama","separaterClass","separater","Transition","in","index","timeout","style","className","onMouseOver","e","isEnableTouch","buttons","changeCell","onMouseDown","React","Component","SorobanValueView","textInput","createRef","hide","display","show","input","prevProps","prevState","focused","type","imeMode","ref","placeholder","amountValue","toLocaleString","onBlur","onMouseEnter","focus","onMouseLeave","value","onChange","calc","Soroban","Array","length","fill","cellComponents","tableStyle","borderLeft","borderRight","width","enableTouch","toggle","i","max","calcValue","setPositionByNumber","num","v","chars","split","center","Math","ceil","startIndex","c","parseInt","j","params","d","floor","digit","pow","abs","push","key","sep","lastIndex","timerID","setInterval","clearInterval","amount","on","renderCells","onClick","resetZeroPosition","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f40fadf5.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Transition } from 'react-transition-group';\n\nconst BALL_MOVE = 50;\nconst ANIM_DURATION = 200;\nconst BALL_ANIM = {\n  entering: {\n    transition: 'all ' + ANIM_DURATION + 'ms ease',\n    marginTop: -BALL_MOVE,\n  },\n  entered: {\n    transition: '',\n  },\n  exiting: {\n    transition: 'all ' + ANIM_DURATION + 'ms ease',\n    marginTop: BALL_MOVE,\n  },\n  exited: {\n    transition: '',\n  }\n}\n\n// そろばんの珠を表すコンポーネント\n// \n// 親の持つ配列を参照してアニメーションさせるかを判定する\n// 珠のアニメーションはすべて上に移動させるもの。\n// つまり、五珠はアニメーションしている状態がゼロで、\n// 一珠はアニメーションしていない状態がゼロである\nclass SorobanCell extends React.Component {\n  constructor(props) {\n    super(props);\n    // テーブルセルスタイル\n    this.tableCellStyle = {\n      border: '4px #ca7d45 solid',\n      height: 38,\n      borderTop: '0px',\n      borderBottom: '0px',\n    };\n    this.tableCellSeparaterStyle = {\n      border: '4px #ca7d45 solid',\n      height: 38,\n      borderTop: '0px',\n      borderBottom: '16px #5a2a08 solid'\n    };\n    // 珠の位置スタイル\n    this.upStyle = {\n      marginTop: -BALL_MOVE\n    };\n    this.defaultStyle = {\n      marginTop: 0\n    };\n    this.state = {\n      cells: props.cells,\n      cellStyle: this.defaultStyle,\n    };\n  }\n  render() {\n    const callbacks = {\n      onEnter: () => this.setState({cellStyle: this.defaultStyle}),\n      onEntered: () => this.setState({cellStyle: this.upStyle}),\n      onExit: () => this.setState({cellStyle: this.upStyle}),\n      onExited: () => this.setState({cellStyle: this.defaultStyle}),\n    };\n    const tamaClass = (this.props.tama ? \"tama icon\" : null)\n    const separaterClass = (this.props.separater ? this.tableCellSeparaterStyle : this.tableCellStyle)\n    return (<Transition in={this.state.cells[this.props.index]} timeout={ANIM_DURATION} {...callbacks}>\n      {\n        state => (\n        <td style={separaterClass}>\n          <div style={this.state.cellStyle}>\n            <div style={BALL_ANIM[state]}>\n              <div className={tamaClass}\n                onMouseOver={(e) => {\n                  if (!this.props.isEnableTouch()) return;\n                  if (e.buttons === 0) return; // 何かボタンを押していたら\n                  if (state === 'entered' || state === 'exited') {\n                    this.props.changeCell(this.props.index);\n                  }\n                }}\n                onMouseDown={() => {\n                  if (!this.props.isEnableTouch()) return;\n                  if (state === 'entered' || state === 'exited') {\n                    this.props.changeCell(this.props.index);\n                  }\n                }}\n              ></div>\n            </div>\n          </div>\n        </td>)\n      }\n    </Transition>);\n  }\n}\n\nclass SorobanValueView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.textInput = React.createRef();\n    this.hide = { display: 'none' };\n    this.show = { display: '' };\n    this.state = {\n      input: false,\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.input && !prevState.input) {\n      //this.textInput.focus();\n    }\n  }\n  render() {\n    let focused = false;\n    return (\n      <>\n        <div style={this.state.input ? this.show : this.hide}>\n          <input type=\"number\" style={{imeMode: 'disabled'}} ref={(input) => { this.textInput = input; }} placeholder={this.props.amountValue.toLocaleString()} className=\"amount\"\n            onBlur={(e) => {\n              this.setState({input:false});\n              focused = false;\n            }}\n            onMouseEnter={(e) => {\n              if (!focused) {\n                this.textInput.focus();\n                focused = true;\n              }\n            }}\n            onMouseLeave={(e) => {\n              this.setState({input:false});\n              focused = false;\n              this.textInput.value = this.props.amountValue;\n            }}\n            onChange={()=> {\n              this.props.calc(this.textInput.value);\n              //console.log(this.textInput.value);\n            }}\n          ></input >\n        </div>\n        <div style={this.state.input ? this.hide : this.show}>\n          <div className=\"amount\" onMouseDown={(e) => {\n            this.setState({input:true});\n            this.textInput.value = this.props.amountValue;\n          }}>{this.props.amountValue.toLocaleString()}</div>\n        </div>\n      </>\n    );\n  }\n}\n\nclass Soroban extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      amountValue: 0,\n      cells: Array(props.length * 7).fill(false)\n    };\n    this.cellComponents = [];\n    // デザイン定義\n    // テーブル\n    this.tableStyle = {\n      border: '16px #5a2a08 solid',\n      borderLeft: '32px #5a2a08 solid',\n      borderRight: '32px #5a2a08 solid',\n      width: 64 * props.length,\n    };\n    this.length = props.length;\n    this.enableTouch = false;\n    // 操作可能か判定するコールバック\n    this.isEnableTouch = () => {\n      return this.enableTouch;\n    }\n    // 珠を動かす（おく）コールバック\n    this.changeCell = (index) => {\n      let cells = this.state.cells;\n      // 自身の珠を動かす\n      let toggle = !cells[index];\n      cells[index] = toggle;\n      // 自身より上にある珠を動かす\n      if (toggle) {\n        let i = index;\n        let max = this.length * 2; // 最初の2行は動かさない\n        while (i > max) {\n          cells[i] = toggle;\n          i = i - this.length;\n        }\n      // 最初の2行以外、自身より下にある珠を動かす\n      } else if (index > this.length * 2) {\n        let i = index;\n        let max = cells.length;\n        while (i < max) {\n          cells[i] = toggle;\n          i = i + this.length;\n        }\n      }\n      this.setState({cells: cells});\n      this.calcValue();\n    }\n    // 数値文字列からそろばん配置に反映\n    this.setPositionByNumber = (num) => {\n      let cells = this.state.cells;\n      let isBallOf5 = (v) => { return (this.length * 2) > v; }\n      for(let i = 0; i < this.state.cells.length; i++) {\n        cells[i] = isBallOf5(i);\n      }\n      let chars = num.split(\"\");\n      let center = Math.ceil(this.props.length / 2);\n      let skipRaw = 3; // 五珠の二行と一珠の一行目をスキップ\n      if (chars.length < center) {\n        let startIndex = center - chars.length;\n        for (let i = 0; i < chars.length; ++i) {  \n          let c = parseInt(chars[i]);\n          if (c >= 5) {\n            cells[startIndex + this.props.length + i] = false;\n            c -= 5;\n          }\n          for (let j = 0; j < c; ++j) {\n            cells[startIndex + (this.props.length * (j + skipRaw)) + i] = true;\n          }\n        }\n      }\n      this.setState({cells: cells});\n      this.calcValue();\n    }\n  }\n  renderCells(params) {\n    // そろばんの一行を作成\n    let cellComponents = [];\n    let max = params.num - 1;\n    for(let i = 0; i < max; i++) {\n      let index = (params.index * params.num) + i;\n      let d = Math.floor(max / 2) - i;\n      let digit = Math.pow(10, Math.abs(d)) * (d >= 0 ? 1 : -1);\n      cellComponents.push(<SorobanCell \n        key={index} index={index} value={params.value} digit={digit}\n        tama={params.tama} separater={params.sep} cells={this.state.cells} changeCell={this.changeCell} isEnableTouch={this.isEnableTouch}\n      />);\n    }\n    // 最後の列は珠なし\n    let lastIndex = (params.index * params.num) + params.num;\n    cellComponents.push(<SorobanCell \n      key={lastIndex} index={lastIndex} value={0} digit={0}\n      tama={false} separater={params.sep} cells={this.state.cells} changeCell={this.changeCell}\n    />)\n    this.cellComponents[params.index] = cellComponents;\n    return (<tr>{cellComponents}</tr>);\n  }\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => {\n        let cells = this.state.cells;\n        let isBallOf5 = (v) => { return (this.length * 2) > v; }\n        for(let i = 0; i < this.state.cells.length; i++) {\n          if (isBallOf5(i) && !cells[i]) {\n            cells[i] = true;\n            this.setState({cells: cells});\n            return;\n          }\n        }\n        this.enableTouch = true;\n        clearInterval(this.timerID);\n      },\n      20\n    );\n  }\n  resetZeroPosition() {\n    let cells = this.state.cells;\n    let isBallOf5 = (v) => { return (this.length * 2) > v; }\n    for(let i = 0; i < this.state.cells.length; i++) {\n      cells[i] = isBallOf5(i);\n    }\n    this.setState({cells: cells});\n    this.calcValue();\n  }\n  calcValue() {\n    let amount = 0;\n    for (let i = 0; i < this.cellComponents.length; ++i) {\n      for (let j = 0; j < this.cellComponents[i].length; ++j) {\n        let params = this.cellComponents[i][j].props;\n        let on = this.state.cells[(this.length * i) + j];\n        if (typeof params.tama === 'undefined') continue;\n        let value = (params.digit * params.value);\n        if (params.value === 5)  amount += !on ? value : 0;\n        else if (params.value === 1)  amount += on ? value : 0;\n      }\n    }\n    this.setState({amountValue: amount});\n  }\n\n  render() {\n    return (\n      <>\n        <table style={this.tableStyle}>\n          <tbody>\n            { this.renderCells({ index:0, num:this.props.length}) }\n            { this.renderCells({ index:1, num:this.props.length, sep:true, tama:true, value:5 }) }\n            { this.renderCells({ index:2, num:this.props.length}) }\n            { this.renderCells({ index:3, num:this.props.length, tama:true, value:1 }) }\n            { this.renderCells({ index:4, num:this.props.length, tama:true, value:1 }) }\n            { this.renderCells({ index:5, num:this.props.length, tama:true, value:1 }) }\n            { this.renderCells({ index:6, num:this.props.length, tama:true, value:1 }) }\n          </tbody>\n        </table>\n        <div className=\"btn-area\">\n          <button className=\"btn-square-little-rich\" onClick={() => this.resetZeroPosition()}>RESET ZERO</button>\n        </div>\n        <SorobanValueView amountValue={this.state.amountValue} calc={this.setPositionByNumber} />\n      </>\n    );\n  }\n}\nexport default Soroban;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Soroban from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Soroban length={23} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}